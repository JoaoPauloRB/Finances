@using Features.Accounts
@using Features.FinancialTransactions
@using Web.Components.Modal;
@using Domain.Models;
@inject HttpClient Http

@inherits BlazorStateComponent

<Modal @ref="@modal">
  <EditForm Model="@model" OnValidSubmit="@OnSubmit">
    <div>
      <label for="description">Descrição</label>
      <input type="text" id="description" @bind="@model.Description"/>
    </div>
    <div>
      <label for="amount">Valor</label>
      <input type="number" id="amount" @bind="@model.Amount"/>
    </div>
    <div>
      <label for="category">Categoria</label>
      <select @bind="@model.CategoryId" id="category">
        <option>
          Selecione
        </option>
        @if(Categories != null) {
          @foreach (Category category in Categories)
          {
            <option value=@category.CategoryId>
              @category.Description
            </option>
          }
        }     
      </select>
    </div>
    <div>
      <label for="account">Conta</label>
      <select @bind="@model.AccountId" id="account">
        <option>
          Selecione
        </option>
        @if(AccountState.accounts != null) {
          @foreach (Account account in AccountState.accounts)
          {
            <option value=@account.AccountId>
              @account.Description
            </option>
          }
        }     
      </select>
    </div>
    <div>
      <button @onclick="modal.Close" type="button" class="btn btn-default">Cancelar</button>
      <button type="submit" class="btn btn-primary">Confirmar</button>
    </div>
  </EditForm>
</Modal>

@code {

    AccountState AccountState => GetState<AccountState>();
    public List<Category> Categories = new List<Category>();
    FinancialTransaction model = new FinancialTransaction();
    Modal modal = new Modal();

    private void OnSubmit() {
      Mediator.Send(new FinancialTransactionState.AddFinancialTransactionAction(model));
    }

    public void Open() {
      modal.Show();
    }
}