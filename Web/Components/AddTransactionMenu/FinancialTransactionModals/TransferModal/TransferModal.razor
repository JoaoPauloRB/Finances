@using Domain.Dtos
@using Features.Categories
@using Features.Accounts
@using Features.FinancialTransactions
@using Web.Components.Modal;
@using Domain.Models;
@using Domain.Enums;
@inject HttpClient Http

@inherits BlazorStateComponent

<Modal @ref="@modal" Title="Receita">
  <EditForm Model="@model" OnValidSubmit="@OnSubmit">
    <div>
      <label for="amount">Valor</label>
      <input type="number" id="amount" @bind="@model.Amount"/>
    </div>
    <div>
      <label for="account">De</label>
      <select @bind="@model.AccountFrom" id="account">
        <option>
          Selecione
        </option>
        @if(AccountState.accounts != null) {
          @foreach (Account account in AccountState.accounts)
          {
            <option value=@account.AccountId>
              @account.Description
            </option>
          }
        }     
      </select>
    </div>
    <div>
      <label for="account">Para</label>
      <select @bind="@model.AccountTo" id="account">
        <option>
          Selecione
        </option>
        @if(AccountState.accounts != null) {
          @foreach (Account account in AccountState.accounts)
          {
            <option value=@account.AccountId>
              @account.Description
            </option>
          }
        }     
      </select>
    </div>
    <div>
      <button @onclick="@modal.Close" type="button" class="btn btn-default">Cancelar</button>
      <button type="submit" class="btn btn-primary">Confirmar</button>
    </div>
  </EditForm>
</Modal>

@code {
    AccountState AccountState => GetState<AccountState>();
    TransferDto model = new TransferDto();
    public Modal modal = new Modal();

    protected override async Task OnInitializedAsync()
    {
      await Mediator.Send(new AccountState.ListAccountsAction());
    }

    private void OnSubmit() {
      Mediator.Send(new FinancialTransactionState.TransferAction(model));
      model = new TransferDto();
      modal.Close();
    }

    public void Open() {
      modal.Show();
    }
}