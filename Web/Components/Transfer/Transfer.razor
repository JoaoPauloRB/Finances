@using Domain.Dtos
@using Features.Accounts
@using Features.Categories
@using Domain.Models
@using Features.FinancialTransactions

@inherits BlazorStateComponent
<EditForm Model="@model" OnValidSubmit="@OnSubmit">
    <div class="form-group">
      <label for="amount">Valor</label>
      <InputNumber id="amount" @bind-Value="model.Amount" class="form-control"/>
    </div>
    <div class="form-group">
      <label for="accountFrom">De</label>
      <InputSelect @bind-Value="model.AccountFrom" id="accountFrom" class="form-control">
        <option>
          Selecione
        </option>
        @if(AccountState.accounts != null) {
          @foreach (Account account in AccountState.accounts)
          {
            <option value=@account.AccountId>
              @account.Description
            </option>
          }
        }     
      </InputSelect>
    </div>
    <div class="form-group">
      <label for="accountTo">Para</label>
      <InputSelect @bind-Value="model.AccountTo" id="accountTo" class="form-control">
        <option>
          Selecione
        </option>
        @if(AccountState.accounts != null) {
          @foreach (Account account in AccountState.accounts)
          {
            <option value=@account.AccountId>
              @account.Description
            </option>
          }
        }     
      </InputSelect>
    </div>
    <div class="footer-buttons">
      <button @onclick="@OnCancel" type="button" class="btn btn-secondary">Cancelar</button>
      <button type="submit" class="btn btn-primary">Confirmar</button>
    </div>
</EditForm>

  @code {
    [Parameter]
    public Action CancelCallback { get; set; }
    [Parameter]
    public Action SubmitCallback { get; set; }
    AccountState AccountState => GetState<AccountState>();
    CategoryState CategoryState => GetState<CategoryState>();
    TransferDto model = new TransferDto();

    private void OnSubmit()
    {
      Mediator.Send(new FinancialTransactionState.TransferAction(model));
      model = new TransferDto();
      if(SubmitCallback != null) SubmitCallback();
    }

    private void OnCancel()
    {
        model = new TransferDto();
        if(CancelCallback != null) CancelCallback();
    }
    
}