@page "/account"
@using Web.Features.Accounts
@using Web.Components.AccountCard
@using Domain.Models

@inherits BlazorStateComponent

@attribute [Authorize]
<h1>Contas</h1>

<div class="new-account-form-wrapper">
  <EditForm Model="@account" OnValidSubmit="@AddAccount">
    <DataAnnotationsValidator />
    <div class="form-group">
      <label for="description">Descrição</label>
      <InputText class="form-control" id="description" @bind-Value="account.Description" />
      <ValidationMessage For="@(() => account.Description)" />
    </div>
    <div class="form-group">
      <label for="balance">Saldo</label>
      <InputNumber class="form-control" id="balance" @bind-Value="account.Balance" />
      <ValidationMessage For="@(() => account.Balance)" />
    </div>
    <div class="buttons-footer">
      <button class="btn btn-secondary" @onclick="Cancel">
        Cancelar
      </button>
      <button class="btn btn-primary" type="submit">
        @(account.AccountId != 0 ? "Editar" : "Adicionar")
      </button>
    </div>
  </EditForm>
</div>


<div class="list-accounts-wrapper">
  @foreach (var acc in State.accounts)
  {
    <AccountCard
      Account="@acc"
      Currency="0"
      Edit="EditAccount"/>
  }
</div>

@code {
  AccountState State => GetState<AccountState>();
  Account account = new Account();
  private async void AddAccount()
  {    
    await Mediator.Send(new AccountState.AddAccountAction(account));
    account = new Account();
    StateHasChanged();
  }

  private void Cancel()
  {    
    account = new Account();
  }

  void EditAccount(Account model)
  {    
    account = new Account() {
      AccountId = model.AccountId,
      Description = model.Description,
      Balance = model.Balance
    };
  }
  protected override async Task OnInitializedAsync()
  {
    await Mediator.Send(new AccountState.ListAccountsAction());
  }
}
